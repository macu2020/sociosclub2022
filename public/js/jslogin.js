/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/jslogin.js":
/*!*********************************!*\
  !*** ./resources/js/jslogin.js ***!
  \*********************************/
/***/ (() => {

eval("var macuriwebmac = function () {\n  var body = $('body'),\n      getId = null,\n      //-------> variable vacia\n  isMobile = !1,\n      //-------> variable false\n  urlPathname = window.location.pathname,\n      //---> ruta y el nombre de archivo de la p치gina actual\n  domainurl = 'http://localhost/sociosclub2021/public';\n  Toptitop = function Toptitop() {\n    if (/windows phone/i.test(navigator.userAgent) || /android/i.test(navigator.userAgent) || /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream) {\n      isMobile = !0; //---->se convierte en true\n    }\n\n    ;\n    fn.documentAjax();\n    fn.documentOnload();\n    fn.documentReady();\n  }, fn = {\n    documentAjax: function documentAjax() {\n      $(document).ajaxStop(function () {//fn.login();\n        //-->llama como unevento previo de estar cargando\n      });\n    },\n    documentOnload: function documentOnload() {\n      $(window).on('load', function () {});\n    },\n    documentReady: function documentReady() {\n      fn.otros();\n      fn.tooglelogin();\n      fn.validaregister();\n      fn.validalogin();\n    },\n    tooglelogin: function tooglelogin() {\n      $(\".toggle-password\").click(function () {\n        $(this).toggleClass(\"fa-eye fa-eye-slash\");\n        var input = $($(this).attr(\"toggle\"));\n\n        if (input.attr(\"type\") == \"password\") {\n          input.attr(\"type\", \"text\");\n        } else {\n          input.attr(\"type\", \"password\");\n        }\n      });\n    },\n    otros: function otros() {\n      //----> Otros Elementos \n      if ($(\".alert\").length > 0) {\n        //----> alerta Errores\n        alertify.alert().setting({\n          'title': 'Se ha producido un error : ',\n          'label': 'ok',\n          'message': $('.alert').html(),\n          'onok': function onok() {\n            alertify.error('游땞 Vuelva a intentar !!!');\n          }\n        }).show();\n      }\n\n      if ($(\".suceess\").length > 0) {\n        //--> alerta success\n        alertify.alert().setting({\n          'title': $('.titlesuceess').html(),\n          'label': 'ok',\n          'message': $('.suceess').html(),\n          'onok': function onok() {\n            alertify.success($('#subitisucess').html());\n          }\n        }).show();\n      } //------> VALIDACIONES                \n\n\n      $(\"#celu\").bind('keypress', function (event) {\n        var regex = new RegExp(\"^[0-9]+$\");\n        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);\n\n        if (!regex.test(key)) {\n          event.preventDefault();\n          return false;\n        }\n\n        if (event.which < 48 || event.which > 57 || this.value.length === 12) {\n          return false;\n        }\n      });\n      $(\"#email\").bind('keypress', function (event) {\n        if (this.value.length === 35) {\n          return false;\n        }\n      });\n      $(\"#first_name\").bind('keypress', function (event) {\n        var regex = new RegExp(\"^[a-zA-Z치칠칤칩칰칲침츼칄칈칍칔칖칌 ]+$\");\n        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);\n\n        if (!regex.test(key)) {\n          event.preventDefault();\n          return false;\n        }\n\n        if (this.value.length === 25) {\n          return false;\n        }\n      });\n      $(\"#last_name\").bind('keypress', function (event) {\n        var regex = new RegExp(\"^[a-zA-Z치칠칤칩칰칲침츼칄칈칍칔칖칌 ]+$\");\n        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);\n\n        if (!regex.test(key)) {\n          event.preventDefault();\n          return false;\n        }\n\n        if (this.value.length === 25) {\n          return false;\n        }\n      });\n      $(\"#password\").bind('keypress', function (event) {\n        if (this.value.length === 10) {\n          return false;\n        }\n      });\n      $(\"#conf_pass\").bind('keypress', function (event) {\n        if (this.value.length === 10) {\n          return false;\n        }\n      });\n      $(\"#mensaj\").bind('keypress', function (event) {\n        var regex = new RegExp(\"^[a-zA-Z치칠칤칩칰칲침츼칄칈칍칔칖칌0-9. ]+$\");\n        var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);\n\n        if (!regex.test(key)) {\n          event.preventDefault();\n          return false;\n        }\n\n        if (this.value.length === 120) {\n          return false;\n        }\n      }); //------> VALIDACIUON JQUERYVALIDATOR \n\n      jQuery.validator.addMethod(\"noSpace\", function (value, element) {\n        return value == \"\" || value.trim().length != 0;\n      }, \"No dejar espacios vacios\");\n    },\n    validaregister: function validaregister() {\n      $('#regitration_form').validate({\n        ignore: '.ignore',\n        errorClass: 'invalid',\n        validClass: 'success',\n        rules: {\n          first_name: {\n            required: true,\n            minlength: 2,\n            maxlength: 25,\n            noSpace: true\n          },\n          last_name: {\n            required: true,\n            minlength: 2,\n            maxlength: 25,\n            noSpace: true\n          },\n          email: {\n            required: true,\n            email: true,\n            remote: {\n              url: domainurl + \"/check_email_unique\",\n              type: \"post\",\n              data: {\n                email: function email() {\n                  return $(\"#email\").val();\n                },\n                '_token': $('meta[name=\"csrf-token\"]').attr('content')\n              }\n            }\n          },\n          password: {\n            required: true,\n            minlength: 6,\n            maxlength: 10\n          },\n          selecperfil: {\n            required: true\n          },\n          conf_pass: {\n            required: true,\n            maxlength: 10,\n            equalTo: '#password'\n          },\n          grecaptcha: \"required\"\n        },\n        messages: {\n          first_name: {\n            required: \"Porfavor ingrese su nombre\",\n            minlength: \"Porfavor minimo 2 caracteres\",\n            maxlength: \"Prfavor maximo 25 caracteres\"\n          },\n          last_name: {\n            required: \"Porfavor ingrese el apellido\",\n            minlength: \"Porfavor minimo 2 caracteres\",\n            maxlength: \"Prfavor maximo 25 caracteres\"\n          },\n          selecperfil: {\n            required: \"Perfil requerido\"\n          },\n          email: {\n            required: \"Porfavor ingrese su Email\",\n            email: \"Su correo electr칩nico no es valido\",\n            remote: \"Correo electr칩nico ya en uso.Prueba con otro\"\n          },\n          password: {\n            required: \"Ingrese su password\",\n            minlength: \"Porfavor minimo 6 caracteres\",\n            maxlength: \"Prfavor maximo 10 caracteres\"\n          },\n          conf_pass: {\n            required: \"Necesita la confirmacion de su password\",\n            equalTo: \"La contrase침a no conciden\"\n          },\n          grecaptcha: \"El campo Captcha es obligatorio\"\n        },\n        errorPlacement: function errorPlacement(error, element) {\n          if (element.attr('name') == 'terms') {\n            error.appendTo($('#terms_error'));\n          } else if (element.attr('name') == 'grecaptcha') {\n            error.appendTo($('#hiddenRecaptchaRegisterError'));\n          } else {\n            error.insertAfter(element);\n          }\n        },\n        submitHandler: function submitHandler(form) {\n          //animacion \n          $.LoadingOverlay(\"show\");\n          form.submit();\n        }\n      });\n    },\n    validalogin: function validalogin() {\n      $('#login_form').validate({\n        ignore: '.ignore',\n        errorClass: 'invalid',\n        validClass: 'success',\n        rules: {\n          email: {\n            required: true,\n            email: true,\n            noSpace: true\n          },\n          password: {\n            required: true,\n            minlength: 6,\n            maxlength: 10,\n            noSpace: true\n          },\n          selecperfil: {\n            required: true\n          },\n          grecaptcha: \"required\"\n        },\n        messages: {\n          email: {\n            required: \"El Correo es obligatorio\",\n            email: \"Su direcci칩n de correo electr칩nico es invalido\"\n          },\n          password: {\n            required: \"Ingrese su password\",\n            minlength: \"Porfavor minimo 6 caracteres\",\n            maxlength: \"Prfavor maximo 10 caracteres\"\n          },\n          selecperfil: {\n            required: \"Perfil requerido\"\n          },\n          grecaptcha: \"El campo Captcha es obligatorio\"\n        },\n        errorPlacement: function errorPlacement(error, element) {\n          if (element.attr('name') == 'grecaptcha') {\n            error.appendTo($('#hiddenRecaptchaLoginError'));\n          } else {\n            error.insertAfter(element);\n          }\n        },\n        submitHandler: function submitHandler(form) {\n          $.LoadingOverlay(\"show\");\n          form.submit();\n        }\n      });\n    }\n  };\n  Toptitop();\n}(jQuery, window);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvanNsb2dpbi5qcz8xYTZjIl0sIm5hbWVzIjpbIm1hY3VyaXdlYm1hYyIsImJvZHkiLCIkIiwiZ2V0SWQiLCJpc01vYmlsZSIsInVybFBhdGhuYW1lIiwid2luZG93IiwibG9jYXRpb24iLCJwYXRobmFtZSIsImRvbWFpbnVybCIsIlRvcHRpdG9wIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIk1TU3RyZWFtIiwiZm4iLCJkb2N1bWVudEFqYXgiLCJkb2N1bWVudE9ubG9hZCIsImRvY3VtZW50UmVhZHkiLCJkb2N1bWVudCIsImFqYXhTdG9wIiwib24iLCJvdHJvcyIsInRvb2dsZWxvZ2luIiwidmFsaWRhcmVnaXN0ZXIiLCJ2YWxpZGFsb2dpbiIsImNsaWNrIiwidG9nZ2xlQ2xhc3MiLCJpbnB1dCIsImF0dHIiLCJsZW5ndGgiLCJhbGVydGlmeSIsImFsZXJ0Iiwic2V0dGluZyIsImh0bWwiLCJlcnJvciIsInNob3ciLCJzdWNjZXNzIiwiYmluZCIsImV2ZW50IiwicmVnZXgiLCJSZWdFeHAiLCJrZXkiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJjaGFyQ29kZSIsIndoaWNoIiwicHJldmVudERlZmF1bHQiLCJ2YWx1ZSIsImpRdWVyeSIsInZhbGlkYXRvciIsImFkZE1ldGhvZCIsImVsZW1lbnQiLCJ0cmltIiwidmFsaWRhdGUiLCJpZ25vcmUiLCJlcnJvckNsYXNzIiwidmFsaWRDbGFzcyIsInJ1bGVzIiwiZmlyc3RfbmFtZSIsInJlcXVpcmVkIiwibWlubGVuZ3RoIiwibWF4bGVuZ3RoIiwibm9TcGFjZSIsImxhc3RfbmFtZSIsImVtYWlsIiwicmVtb3RlIiwidXJsIiwidHlwZSIsImRhdGEiLCJ2YWwiLCJwYXNzd29yZCIsInNlbGVjcGVyZmlsIiwiY29uZl9wYXNzIiwiZXF1YWxUbyIsImdyZWNhcHRjaGEiLCJtZXNzYWdlcyIsImVycm9yUGxhY2VtZW50IiwiYXBwZW5kVG8iLCJpbnNl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LFFBQUFBLGFBQWEsRUFBQyx1QkFBU0MsSUFBVCxFQUFjO0FBRXpCL0UsVUFBQUEsQ0FBQyxDQUFDZ0YsY0FBRixDQUFpQixNQUFqQjtBQUNBRCxVQUFBQSxJQUFJLENBQUNFLE1BQUw7QUFDRjtBQW5Eb0IsT0FBMUI7QUFxREQ7QUF6UUYsR0FUYjtBQW9SSXpFLEVBQUFBLFFBQVE7QUFDWCxDQTVSZ0IsQ0E0UmZ1QyxNQTVSZSxFQTRSUDNDLE1BNVJPLENBQW5CIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG52YXIgbWFjdXJpd2VibWFjID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIGJvZHkgPSAkKCdib2R5JyksXHJcbiAgICAgICAgZ2V0SWQgPSBudWxsLCAgICAgICAgICAgICAgICAgICAgICAgLy8tLS0tLS0tPiB2YXJpYWJsZSB2YWNpYVxyXG4gICAgICAgIGlzTW9iaWxlID0gITEsICAgICAgICAgICAgICAgICAgICAgIC8vLS0tLS0tLT4gdmFyaWFibGUgZmFsc2VcclxuICAgICAgICB1cmxQYXRobmFtZSA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSwvLy0tLT4gcnV0YSB5IGVsIG5vbWJyZSBkZSBhcmNoaXZvIGRlIGxhIHDDoWdpbmEgYWN0dWFsXHJcbiAgICAgICAgZG9tYWludXJsID0gJ2h0dHA6Ly9sb2NhbGhvc3Qvc29jaW9zY2x1YjIwMjEvcHVibGljJzsgXHJcblxyXG4gIFRvcHRpdG9wID0gZnVuY3Rpb24oKSB7IFxyXG4gICAgICBpZiAoICgvd2luZG93cyBwaG9uZS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHx8KC9hbmRyb2lkL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkgfHwgXHJcbiAgICAgICAgICAgICAgICAgICAgKC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICYmICF3aW5kb3cuTVNTdHJlYW0pICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBpc01vYmlsZSA9ICEwOyAgLy8tLS0tPnNlIGNvbnZpZXJ0ZSBlbiB0cnVlXHJcbiAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgIGZuLmRvY3VtZW50QWpheCgpO1xyXG4gICAgICAgICAgICAgIGZuLmRvY3VtZW50T25sb2FkKCk7XHJcbiAgICAgICAgICAgICAgZm4uZG9jdW1lbnRSZWFkeSgpO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGZuID0geyBcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50QWpheDogZnVuY3Rpb24oKSAgIHtcclxuICAgICAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5hamF4U3RvcChmdW5jdGlvbigpIHsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZm4ubG9naW4oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8tLT5sbGFtYSBjb21vIHVuZXZlbnRvIHByZXZpbyBkZSBlc3RhciBjYXJnYW5kb1xyXG4gICAgICAgICAgICAgICAgICAgIH0pOyBcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudE9ubG9hZDpmdW5jdGlvbigpICB7IFxyXG4gICAgICAgICAgICAgICAgICAgICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgfSk7ICBcclxuICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRSZWFkeTogZnVuY3Rpb24oKSAge1xyXG4gICAgICAgICAgICAgICAgICBmbi5vdHJvcygpXHJcbiAgICAgICAgICAgICAgICAgIGZuLnRvb2dsZWxvZ2luKClcclxuICAgICAgICAgICAgICAgICAgZm4udmFsaWRhcmVnaXN0ZXIoKVxyXG4gICAgICAgICAgICAgICAgICBmbi52YWxpZGFsb2dpbigpXHJcbiAgICAgICAgICAgICAgICB9LCBcclxuICAgICAgICAgICAgICAgIHRvb2dsZWxvZ2luOmZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICQoXCIudG9nZ2xlLXBhc3N3b3JkXCIpLmNsaWNrKGZ1bmN0aW9uKCkgeyAgIFxyXG4gICAgICAgICAgICAgICAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKFwiZmEtZXllIGZhLWV5ZS1zbGFzaFwiKTtcclxuICAgICAgICAgICAgICAgICAgbGV0IGlucHV0ID0gJCgkKHRoaXMpLmF0dHIoXCJ0b2dnbGVcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5hdHRyKFwidHlwZVwiKSA9PSBcInBhc3N3b3JkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuYXR0cihcInR5cGVcIiwgXCJ0ZXh0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmF0dHIoXCJ0eXBlXCIsIFwicGFzc3dvcmRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBvdHJvczogZnVuY3Rpb24oKSB7ICAgICAgIC8vLS0tLT4gT3Ryb3MgRWxlbWVudG9zIFxyXG4gICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgaWYgKCQoXCIuYWxlcnRcIikubGVuZ3RoID4gMCl7Ly8tLS0tPiBhbGVydGEgRXJyb3Jlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydGlmeS5hbGVydCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZXR0aW5nKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlJzonU2UgaGEgcHJvZHVjaWRvIHVuIGVycm9yIDogJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xhYmVsJzonb2snLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWVzc2FnZSc6ICQoJy5hbGVydCcpLmh0bWwoKSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbm9rJzogZnVuY3Rpb24oKXsgYWxlcnRpZnkuZXJyb3IoJ/CfmJQgVnVlbHZhIGEgaW50ZW50YXIgISEhJyk7fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgaWYgKCQoXCIuc3VjZWVzc1wiKS5sZW5ndGggPiAwKXsvLy0tPiBhbGVydGEgc3VjY2Vzc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydGlmeS5hbGVydCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXR0aW5nKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiQoJy50aXRsZXN1Y2Vlc3MnKS5odG1sKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xhYmVsJzonb2snLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdtZXNzYWdlJzogJCgnLnN1Y2Vlc3MnKS5odG1sKCkgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdvbm9rJzogZnVuY3Rpb24oKXsgYWxlcnRpZnkuc3VjY2VzcygkKCcjc3ViaXRpc3VjZXNzJykuaHRtbCgpKTt9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgfSAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAvLy0tLS0tLT4gVkFMSURBQ0lPTkVTICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICQoXCIjY2VsdVwiKS5iaW5kKCdrZXlwcmVzcycsIGZ1bmN0aW9uKGV2ZW50KSAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChcIl5bMC05XSskXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gU3RyaW5nLmZyb21DaGFyQ29kZSghZXZlbnQuY2hhckNvZGUgPyBldmVudC53aGljaCA6IGV2ZW50LmNoYXJDb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWdleC50ZXN0KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LndoaWNoIDwgNDggfHwgZXZlbnQud2hpY2ggPiA1NyB8fCB0aGlzLnZhbHVlLmxlbmd0aCA9PT0gMTIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJChcIiNlbWFpbFwiKS5iaW5kKCdrZXlwcmVzcycsIGZ1bmN0aW9uKGV2ZW50KSAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICBpZiAoICB0aGlzLnZhbHVlLmxlbmd0aCA9PT0gMzUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAkKFwiI2ZpcnN0X25hbWVcIikuYmluZCgna2V5cHJlc3MnLCBmdW5jdGlvbihldmVudCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKFwiXlthLXpBLVrDocOpw63Ds8O6w7zDscOBw4nDjcOTw5rDnMORIF0rJFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCFldmVudC5jaGFyQ29kZSA/IGV2ZW50LndoaWNoIDogZXZlbnQuY2hhckNvZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWdleC50ZXN0KGtleSkpIHsgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgIGlmICggIHRoaXMudmFsdWUubGVuZ3RoID09PSAyNSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICQoXCIjbGFzdF9uYW1lXCIpLmJpbmQoJ2tleXByZXNzJywgIGZ1bmN0aW9uKGV2ZW50KXtcclxuICAgICAgICAgICAgICAgICAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoXCJeW2EtekEtWsOhw6nDrcOzw7rDvMOxw4HDicONw5PDmsOcw5EgXSskXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoIWV2ZW50LmNoYXJDb2RlID8gZXZlbnQud2hpY2ggOiBldmVudC5jaGFyQ29kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlZ2V4LnRlc3Qoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoICB0aGlzLnZhbHVlLmxlbmd0aCA9PT0gMjUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgJChcIiNwYXNzd29yZFwiKS5iaW5kKCdrZXlwcmVzcycsIGZ1bmN0aW9uKGV2ZW50KSAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCAgdGhpcy52YWx1ZS5sZW5ndGggPT09IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJChcIiNjb25mX3Bhc3NcIikuYmluZCgna2V5cHJlc3MnLCBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCAgdGhpcy52YWx1ZS5sZW5ndGggPT09IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7ICBcclxuICAgICAgICAgICAgICAgICAgICAkKFwiI21lbnNhalwiKS5iaW5kKCdrZXlwcmVzcycsIGZ1bmN0aW9uKGV2ZW50KSAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChcIl5bYS16QS1aw6HDqcOtw7PDusO8w7HDgcOJw43Dk8Oaw5zDkTAtOS4gXSskXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCFldmVudC5jaGFyQ29kZSA/IGV2ZW50LndoaWNoIDogZXZlbnQuY2hhckNvZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVnZXgudGVzdChrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICB0aGlzLnZhbHVlLmxlbmd0aCA9PT0gMTIwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgLy8tLS0tLS0+IFZBTElEQUNJVU9OIEpRVUVSWVZBTElEQVRPUiBcclxuICAgICAgICAgICAgICAgICAgICBqUXVlcnkudmFsaWRhdG9yLmFkZE1ldGhvZChcIm5vU3BhY2VcIiwgZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPT0gXCJcIiB8fCB2YWx1ZS50cmltKCkubGVuZ3RoICE9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgXCJObyBkZWphciBlc3BhY2lvcyB2YWNpb3NcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgfSwgXHJcbiAgICAgICAgICAgICAgICB2YWxpZGFyZWdpc3RlcjpmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAkKCcjcmVnaXRyYXRpb25fZm9ybScpLnZhbGlkYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZTonLmlnbm9yZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICBlcnJvckNsYXNzOidpbnZhbGlkJyxcclxuICAgICAgICAgICAgICAgICAgICAgIHZhbGlkQ2xhc3M6J3N1Y2Nlc3MnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcnVsZXM6e1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGZpcnN0X25hbWU6e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDp0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5sZW5ndGg6MixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4bGVuZ3RoOjI1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBub1NwYWNlOiB0cnVlICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgbGFzdF9uYW1lOntcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6dHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWlubGVuZ3RoOjIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aDoyNSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9TcGFjZTogdHJ1ZSAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOntcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6dHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6dHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBkb21haW51cmwrXCIvY2hlY2tfZW1haWxfdW5pcXVlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicG9zdFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoIFwiI2VtYWlsXCIgKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdfdG9rZW4nOiQoJ21ldGFbbmFtZT1cImNzcmYtdG9rZW5cIl0nKS5hdHRyKCdjb250ZW50JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDp7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOnRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmxlbmd0aDo2LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhsZW5ndGg6MTBcclxuICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHNlbGVjcGVyZmlsOnsgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOnRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICBjb25mX3Bhc3M6e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDp0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhsZW5ndGg6MTAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVxdWFsVG86JyNwYXNzd29yZCdcclxuICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBncmVjYXB0Y2hhOlwicmVxdWlyZWRcIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0X25hbWU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDpcIlBvcmZhdm9yIGluZ3Jlc2Ugc3Ugbm9tYnJlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbmxlbmd0aDpcIlBvcmZhdm9yIG1pbmltbyAyIGNhcmFjdGVyZXNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4bGVuZ3RoOlwiUHJmYXZvciBtYXhpbW8gMjUgY2FyYWN0ZXJlc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RfbmFtZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOlwiUG9yZmF2b3IgaW5ncmVzZSBlbCBhcGVsbGlkb1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5sZW5ndGg6XCJQb3JmYXZvciBtaW5pbW8gMiBjYXJhY3RlcmVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aDpcIlByZmF2b3IgbWF4aW1vIDI1IGNhcmFjdGVyZXNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3BlcmZpbDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogXCJQZXJmaWwgcmVxdWVyaWRvXCJcclxuICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6IFwiUG9yZmF2b3IgaW5ncmVzZSBzdSBFbWFpbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiBcIlN1IGNvcnJlbyBlbGVjdHLDs25pY28gbm8gZXMgdmFsaWRvXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3RlOlwiQ29ycmVvIGVsZWN0csOzbmljbyB5YSBlbiB1c28uUHJ1ZWJhIGNvbiBvdHJvXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOlwiSW5ncmVzZSBzdSBwYXNzd29yZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5sZW5ndGg6XCJQb3JmYXZvciBtaW5pbW8gNiBjYXJhY3RlcmVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aDpcIlByZmF2b3IgbWF4aW1vIDEwIGNhcmFjdGVyZXNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25mX3Bhc3M6e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOlwiTmVjZXNpdGEgbGEgY29uZmlybWFjaW9uIGRlIHN1IHBhc3N3b3JkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXF1YWxUbzpcIkxhIGNvbnRyYXNlw7FhIG5vIGNvbmNpZGVuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIGdyZWNhcHRjaGE6XCJFbCBjYW1wbyBDYXB0Y2hhIGVzIG9ibGlnYXRvcmlvXCJcclxuICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgZXJyb3JQbGFjZW1lbnQ6ZnVuY3Rpb24oZXJyb3IsZWxlbWVudCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZWxlbWVudC5hdHRyKCduYW1lJyk9PSd0ZXJtcycpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IuYXBwZW5kVG8oJCgnI3Rlcm1zX2Vycm9yJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGVsZW1lbnQuYXR0cignbmFtZScpPT0nZ3JlY2FwdGNoYScpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvci5hcHBlbmRUbygkKCcjaGlkZGVuUmVjYXB0Y2hhUmVnaXN0ZXJFcnJvcicpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLmluc2VydEFmdGVyKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXRIYW5kbGVyOmZ1bmN0aW9uKGZvcm0pe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vYW5pbWFjaW9uIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICQuTG9hZGluZ092ZXJsYXkoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLnN1Ym1pdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB2YWxpZGFsb2dpbjpmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAkKCcjbG9naW5fZm9ybScpLnZhbGlkYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZTonLmlnbm9yZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICBlcnJvckNsYXNzOidpbnZhbGlkJyxcclxuICAgICAgICAgICAgICAgICAgICAgIHZhbGlkQ2xhc3M6J3N1Y2Nlc3MnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcnVsZXM6e1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICBlbWFpbDp7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6dHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbDp0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5vU3BhY2U6IHRydWUgICBcclxuICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOntcclxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDp0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1pbmxlbmd0aDo2LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aDoxMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBub1NwYWNlOiB0cnVlIFxyXG4gICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgc2VsZWNwZXJmaWw6eyAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6dHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBncmVjYXB0Y2hhOlwicmVxdWlyZWRcIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXM6IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiBcIkVsIENvcnJlbyBlcyBvYmxpZ2F0b3Jpb1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IFwiU3UgZGlyZWNjacOzbiBkZSBjb3JyZW8gZWxlY3Ryw7NuaWNvIGVzIGludmFsaWRvXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOntcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6XCJJbmdyZXNlIHN1IHBhc3N3b3JkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbmxlbmd0aDpcIlBvcmZhdm9yIG1pbmltbyA2IGNhcmFjdGVyZXNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4bGVuZ3RoOlwiUHJmYXZvciBtYXhpbW8gMTAgY2FyYWN0ZXJlc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3BlcmZpbDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6IFwiUGVyZmlsIHJlcXVlcmlkb1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBncmVjYXB0Y2hhOlwiRWwgY2FtcG8gQ2FwdGNoYSBlcyBvYmxpZ2F0b3Jpb1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICBlcnJvclBsYWNlbWVudDpmdW5jdGlvbihlcnJvcixlbGVtZW50KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZihlbGVtZW50LmF0dHIoJ25hbWUnKT09J2dyZWNhcHRjaGEnKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IuYXBwZW5kVG8oJCgnI2hpZGRlblJlY2FwdGNoYUxvZ2luRXJyb3InKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLmluc2VydEFmdGVyKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdEhhbmRsZXI6ZnVuY3Rpb24oZm9ybSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJC5Mb2FkaW5nT3ZlcmxheShcInNob3dcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5zdWJtaXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgVG9wdGl0b3AoKVxyXG4gIH0oalF1ZXJ5LCB3aW5kb3cpOyBcclxuXHJcblxyXG4gXHJcbiAgICAgICAgIFxyXG5cclxuIFxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgXHJcblxyXG5cclxuXHJcblxyXG4gICAgXHJcblxyXG5cclxuIFxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4gXHJcbiBcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iXSwiZmlsZSI6Ii4vcmVzb3VyY2VzL2pzL2pzbG9naW4uanMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/jslogin.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/jslogin.js"]();
/******/ 	
/******/ })()
;